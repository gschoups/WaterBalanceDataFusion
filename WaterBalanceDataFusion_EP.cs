// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace WaterBalanceDataFusion
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.2102.1701 at 11:02 AM on Thursday, November 11, 2021.
	/// </remarks>
	public partial class WaterBalanceDataFusion_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>The constant 'A'</summary>
		public double A;
		/// <summary>Message to marginal of 'A'</summary>
		public Gamma A_marginal_F;
		/// <summary>The constant 'aQ'</summary>
		public double aQ;
		/// <summary>Message to marginal of 'aQ'</summary>
		public Gamma aQ_marginal_F;
		/// <summary>The constant 'bQ'</summary>
		public double bQ;
		/// <summary>Message to marginal of 'bQ'</summary>
		public Gamma bQ_marginal_F;
		/// <summary>True if Changed_EObs1_EObs2_Nt has executed. Set this to false to force re-execution of Changed_EObs1_EObs2_Nt</summary>
		public bool Changed_EObs1_EObs2_Nt_isDone;
		/// <summary>True if Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs has executed. Set this to false to force re-execution of Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs</summary>
		public bool Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone;
		/// <summary>True if Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21 has executed. Set this to false to force re-execution of Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21</summary>
		public bool Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone;
		/// <summary>True if Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21 has performed initialisation. Set this to false to force re-execution of Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21</summary>
		public bool Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isInitialised;
		/// <summary>True if Changed_EObs1_EObs2_Nt_Par has executed. Set this to false to force re-execution of Changed_EObs1_EObs2_Nt_Par</summary>
		public bool Changed_EObs1_EObs2_Nt_Par_isDone;
		/// <summary>True if Changed_EObs1_Nt_Par has executed. Set this to false to force re-execution of Changed_EObs1_Nt_Par</summary>
		public bool Changed_EObs1_Nt_Par_isDone;
		/// <summary>True if Changed_EObs2_Nt_Par has executed. Set this to false to force re-execution of Changed_EObs2_Nt_Par</summary>
		public bool Changed_EObs2_Nt_Par_isDone;
		/// <summary>True if Changed_Nt has executed. Set this to false to force re-execution of Changed_Nt</summary>
		public bool Changed_Nt_isDone;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3 has executed. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isDone;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3 has performed initialisation. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22 has executed. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22 has performed initialisation. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23 has executed. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23 has performed initialisation. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17 has executed. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isDone;
		/// <summary>True if Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17 has performed initialisation. Set this to false to force re-execution of Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17</summary>
		public bool Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised;
		/// <summary>True if Changed_Nt_Par has executed. Set this to false to force re-execution of Changed_Nt_Par</summary>
		public bool Changed_Nt_Par_isDone;
		/// <summary>True if Changed_Nt_Par_PObs1 has executed. Set this to false to force re-execution of Changed_Nt_Par_PObs1</summary>
		public bool Changed_Nt_Par_PObs1_isDone;
		/// <summary>True if Changed_Nt_Par_PObs1_PObs2 has executed. Set this to false to force re-execution of Changed_Nt_Par_PObs1_PObs2</summary>
		public bool Changed_Nt_Par_PObs1_PObs2_isDone;
		/// <summary>True if Changed_Nt_Par_PObs1_PObs2_PStd has executed. Set this to false to force re-execution of Changed_Nt_Par_PObs1_PObs2_PStd</summary>
		public bool Changed_Nt_Par_PObs1_PObs2_PStd_isDone;
		/// <summary>True if Changed_Nt_Par_PObs2 has executed. Set this to false to force re-execution of Changed_Nt_Par_PObs2</summary>
		public bool Changed_Nt_Par_PObs2_isDone;
		/// <summary>True if Changed_Nt_Par_QObs has executed. Set this to false to force re-execution of Changed_Nt_Par_QObs</summary>
		public bool Changed_Nt_Par_QObs_isDone;
		/// <summary>True if Changed_Nt_Par_QObs_QObsVar has executed. Set this to false to force re-execution of Changed_Nt_Par_QObs_QObsVar</summary>
		public bool Changed_Nt_Par_QObs_QObsVar_isDone;
		/// <summary>True if Changed_Nt_Par_SObs has executed. Set this to false to force re-execution of Changed_Nt_Par_SObs</summary>
		public bool Changed_Nt_Par_SObs_isDone;
		/// <summary>True if Changed_Nt_PObs1_PObs2 has executed. Set this to false to force re-execution of Changed_Nt_PObs1_PObs2</summary>
		public bool Changed_Nt_PObs1_PObs2_isDone;
		/// <summary>True if Changed_Nt_QObs_QObsVar has executed. Set this to false to force re-execution of Changed_Nt_QObs_QObsVar</summary>
		public bool Changed_Nt_QObs_QObsVar_isDone;
		/// <summary>True if Changed_Nt_SObs has executed. Set this to false to force re-execution of Changed_Nt_SObs</summary>
		public bool Changed_Nt_SObs_isDone;
		/// <summary>True if Changed_Par has executed. Set this to false to force re-execution of Changed_Par</summary>
		public bool Changed_Par_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>The constant 'Delta'</summary>
		public double Delta;
		/// <summary>Message to marginal of 'Delta'</summary>
		public Beta Delta_marginal_F;
		public DistributionStructArray<Gaussian,double> E_F;
		/// <summary>Message to marginal of 'E'</summary>
		public DistributionStructArray<Gaussian,double> E_marginal_F;
		/// <summary>Messages from uses of 'E_use'</summary>
		public Gaussian[][] E_uses_B;
		/// <summary>Messages to uses of 'E_use'</summary>
		public Gaussian[][] E_uses_F;
		/// <summary>Field backing the EObs1 property</summary>
		private double[] eObs1;
		/// <summary>Field backing the EObs2 property</summary>
		private double[] eObs2;
		/// <summary>Message to marginal of 'evidence'</summary>
		public Bernoulli evidence_marginal_F;
		/// <summary>The constant 'fE'</summary>
		public double fE;
		/// <summary>Message to marginal of 'fE'</summary>
		public Gamma fE_marginal_F;
		/// <summary>Field backing the Nt property</summary>
		private int nt;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public DistributionStructArray<Gaussian,double> P_F;
		/// <summary>Message to marginal of 'P'</summary>
		public DistributionStructArray<Gaussian,double> P_marginal_F;
		/// <summary>Messages from uses of 'P_use'</summary>
		public Gaussian[][] P_uses_B;
		/// <summary>Messages to uses of 'P_use'</summary>
		public Gaussian[][] P_uses_F;
		/// <summary>Field backing the Par property</summary>
		private Vector par;
		/// <summary>Field backing the ParPrior property</summary>
		private VectorGaussian parPrior;
		/// <summary>Field backing the PObs1 property</summary>
		private double[] pObs1;
		/// <summary>Field backing the PObs2 property</summary>
		private double[] pObs2;
		/// <summary>Field backing the PStd property</summary>
		private double[] pStd;
		public Gaussian[] Q_0_0__B;
		public DistributionStructArray<Gaussian,double> Q_F;
		public Gaussian[] Q_index0_0__B;
		/// <summary>Message to marginal of 'Q'</summary>
		public DistributionStructArray<Gaussian,double> Q_marginal_F;
		/// <summary>Messages from uses of 'Q_use'</summary>
		public Gaussian[][] Q_uses_B;
		/// <summary>Messages to uses of 'Q_use'</summary>
		public Gaussian[][] Q_uses_F;
		/// <summary>Field backing the QObs property</summary>
		private double[] qObs;
		/// <summary>Field backing the QObsVar property</summary>
		private double[] qObsVar;
		/// <summary>The constant 'rE'</summary>
		public double rE;
		/// <summary>Message to marginal of 'rE'</summary>
		public Beta rE_marginal_F;
		/// <summary>The constant 'rP'</summary>
		public double rP;
		/// <summary>Message to marginal of 'rP'</summary>
		public Beta rP_marginal_F;
		public Gaussian[] S_0_0__F;
		public Gaussian[] S_index0_0__F;
		public Gaussian[] S_index0_1__B;
		/// <summary>Message to marginal of 'S'</summary>
		public DistributionStructArray<Gaussian,double> S_marginal_F;
		/// <summary>Message from use of 'S'</summary>
		public DistributionStructArray<Gaussian,double> S_use_B;
		/// <summary>Messages from uses of 'S_use'</summary>
		public Gaussian[][] S_uses_B;
		/// <summary>Messages to uses of 'S_use'</summary>
		public Gaussian[][] S_uses_F;
		/// <summary>Message to marginal of 'S0'</summary>
		public Gaussian S0_marginal_F;
		/// <summary>Field backing the S0Prior property</summary>
		private Gaussian s0Prior;
		/// <summary>Field backing the SObs property</summary>
		private double[] sObs;
		/// <summary>The constant 'SStd'</summary>
		public double SStd;
		/// <summary>Message to marginal of 'SStd'</summary>
		public Gamma SStd_marginal_F;
		/// <summary>The constant 'vbool9'</summary>
		public bool[] vbool9;
		/// <summary>The constant 'vdouble0'</summary>
		public double vdouble0;
		/// <summary>The constant 'vdouble10'</summary>
		public double vdouble10;
		/// <summary>The constant 'vdouble12'</summary>
		public double vdouble12;
		/// <summary>The constant 'vdouble14'</summary>
		public double vdouble14;
		/// <summary>The constant 'vdouble16'</summary>
		public double vdouble16;
		/// <summary>The constant 'vdouble18'</summary>
		public double vdouble18;
		/// <summary>The constant 'vdouble2'</summary>
		public double vdouble2;
		public double vdouble34_reduced;
		/// <summary>The constant 'vdouble36'</summary>
		public double[] vdouble36;
		/// <summary>The constant 'vdouble38'</summary>
		public double[] vdouble38;
		/// <summary>The constant 'vdouble39'</summary>
		public double[] vdouble39;
		/// <summary>The constant 'vdouble4'</summary>
		public double vdouble4;
		public double vdouble42_reduced;
		/// <summary>The constant 'vdouble43'</summary>
		public double[] vdouble43;
		/// <summary>The constant 'vdouble44'</summary>
		public double[] vdouble44;
		/// <summary>The constant 'vdouble45'</summary>
		public double[] vdouble45;
		/// <summary>The constant 'vdouble46'</summary>
		public double[] vdouble46;
		/// <summary>The constant 'vdouble47'</summary>
		public double[] vdouble47;
		public double vdouble51_reduced;
		/// <summary>The constant 'vdouble53'</summary>
		public double[] vdouble53;
		/// <summary>The constant 'vdouble55'</summary>
		public double[] vdouble55;
		/// <summary>The constant 'vdouble56'</summary>
		public double[] vdouble56;
		/// <summary>The constant 'vdouble57'</summary>
		public double[] vdouble57;
		/// <summary>The constant 'vdouble59'</summary>
		public double[] vdouble59;
		/// <summary>The constant 'vdouble6'</summary>
		public double vdouble6;
		public double vdouble61_reduced;
		/// <summary>The constant 'vdouble62'</summary>
		public double[] vdouble62;
		/// <summary>The constant 'vdouble63'</summary>
		public double[] vdouble63;
		/// <summary>The constant 'vdouble64'</summary>
		public double[] vdouble64;
		/// <summary>The constant 'vdouble65'</summary>
		public double[] vdouble65;
		/// <summary>The constant 'vdouble66'</summary>
		public double[] vdouble66;
		public Gaussian[] vdouble71_F;
		/// <summary>The constant 'vdouble72'</summary>
		public double[] vdouble72;
		/// <summary>The constant 'vdouble73'</summary>
		public double[] vdouble73;
		/// <summary>The constant 'vdouble74'</summary>
		public double[] vdouble74;
		public Gaussian[] vdouble77_F;
		public Gaussian[] vdouble78_B;
		public Gaussian[] vdouble78_F;
		/// <summary>The constant 'vdouble8'</summary>
		public double vdouble8;
		public Gaussian[] vdouble82_F;
		public Gaussian[] vdouble83_F;
		/// <summary>The constant 'vdouble88'</summary>
		public double[] vdouble88;
		/// <summary>The constant 'vdouble89'</summary>
		public double[] vdouble89;
		/// <summary>The constant 'vdouble91'</summary>
		public double[] vdouble91;
		/// <summary>The constant 'vdouble92'</summary>
		public double[] vdouble92;
		/// <summary>The constant 'vdouble93'</summary>
		public double[] vdouble93;
		public Gaussian[] vdouble94_B;
		/// <summary>The constant 'vdouble95'</summary>
		public double[] vdouble95;
		/// <summary>The constant 'wE'</summary>
		public double wE;
		/// <summary>Message to marginal of 'wE'</summary>
		public Beta wE_marginal_F;
		/// <summary>The constant 'wP'</summary>
		public double wP;
		/// <summary>Message to marginal of 'wP'</summary>
		public Beta wP_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'EObs1'</summary>
		public double[] EObs1
		{
			get {
				return this.eObs1;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'EObs1\'");
				}
				this.eObs1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_EObs1_EObs2_Nt_isDone = false;
				this.Changed_EObs1_Nt_Par_isDone = false;
				this.Changed_EObs1_EObs2_Nt_Par_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EObs2'</summary>
		public double[] EObs2
		{
			get {
				return this.eObs2;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'EObs2\'");
				}
				this.eObs2 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_EObs1_EObs2_Nt_isDone = false;
				this.Changed_EObs2_Nt_Par_isDone = false;
				this.Changed_EObs1_EObs2_Nt_Par_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Nt'</summary>
		public int Nt
		{
			get {
				return this.nt;
			}
			set {
				if (this.nt!=value) {
					this.nt = value;
					this.numberOfIterationsDone = 0;
					this.Changed_Nt_isDone = false;
					this.Changed_Nt_Par_QObs_isDone = false;
					this.Changed_Nt_QObs_QObsVar_isDone = false;
					this.Changed_Nt_Par_QObs_QObsVar_isDone = false;
					this.Changed_Nt_PObs1_PObs2_isDone = false;
					this.Changed_Nt_Par_PObs2_isDone = false;
					this.Changed_EObs1_EObs2_Nt_isDone = false;
					this.Changed_EObs2_Nt_Par_isDone = false;
					this.Changed_Nt_Par_isDone = false;
					this.Changed_Nt_Par_PObs1_isDone = false;
					this.Changed_Nt_Par_PObs1_PObs2_isDone = false;
					this.Changed_Nt_Par_PObs1_PObs2_PStd_isDone = false;
					this.Changed_EObs1_Nt_Par_isDone = false;
					this.Changed_EObs1_EObs2_Nt_Par_isDone = false;
					this.Changed_Nt_SObs_isDone = false;
					this.Changed_Nt_Par_SObs_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isDone = false;
					this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
					this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
				}
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'Par'</summary>
		public Vector Par
		{
			get {
				return this.par;
			}
			set {
				this.par = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Par_isDone = false;
				this.Changed_Nt_Par_QObs_isDone = false;
				this.Changed_Nt_Par_QObs_QObsVar_isDone = false;
				this.Changed_Nt_Par_PObs2_isDone = false;
				this.Changed_EObs2_Nt_Par_isDone = false;
				this.Changed_Nt_Par_isDone = false;
				this.Changed_Nt_Par_PObs1_isDone = false;
				this.Changed_Nt_Par_PObs1_PObs2_isDone = false;
				this.Changed_Nt_Par_PObs1_PObs2_PStd_isDone = false;
				this.Changed_EObs1_Nt_Par_isDone = false;
				this.Changed_EObs1_EObs2_Nt_Par_isDone = false;
				this.Changed_Nt_Par_SObs_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ParPrior'</summary>
		public VectorGaussian ParPrior
		{
			get {
				return this.parPrior;
			}
			set {
				this.parPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PObs1'</summary>
		public double[] PObs1
		{
			get {
				return this.pObs1;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'PObs1\'");
				}
				this.pObs1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Nt_PObs1_PObs2_isDone = false;
				this.Changed_Nt_Par_PObs1_isDone = false;
				this.Changed_Nt_Par_PObs1_PObs2_isDone = false;
				this.Changed_Nt_Par_PObs1_PObs2_PStd_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PObs2'</summary>
		public double[] PObs2
		{
			get {
				return this.pObs2;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'PObs2\'");
				}
				this.pObs2 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Nt_PObs1_PObs2_isDone = false;
				this.Changed_Nt_Par_PObs2_isDone = false;
				this.Changed_Nt_Par_PObs1_PObs2_isDone = false;
				this.Changed_Nt_Par_PObs1_PObs2_PStd_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PStd'</summary>
		public double[] PStd
		{
			get {
				return this.pStd;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'PStd\'");
				}
				this.pStd = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Nt_Par_PObs1_PObs2_PStd_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'QObs'</summary>
		public double[] QObs
		{
			get {
				return this.qObs;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'QObs\'");
				}
				this.qObs = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Nt_Par_QObs_isDone = false;
				this.Changed_Nt_QObs_QObsVar_isDone = false;
				this.Changed_Nt_Par_QObs_QObsVar_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'QObsVar'</summary>
		public double[] QObsVar
		{
			get {
				return this.qObsVar;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'QObsVar\'");
				}
				this.qObsVar = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Nt_QObs_QObsVar_isDone = false;
				this.Changed_Nt_Par_QObs_QObsVar_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'S0Prior'</summary>
		public Gaussian S0Prior
		{
			get {
				return this.s0Prior;
			}
			set {
				if (this.s0Prior!=value) {
					this.s0Prior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = false;
					this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
					this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'SObs'</summary>
		public double[] SObs
		{
			get {
				return this.sObs;
			}
			set {
				if ((value!=null)&&(value.Length!=this.nt)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.nt)+" was expected for variable \'SObs\'");
				}
				this.sObs = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Nt_SObs_isDone = false;
				this.Changed_Nt_Par_SObs_isDone = false;
				this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised = false;
				this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'A' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma AMarginal()
		{
			return this.A_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'aQ' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma AQMarginal()
		{
			return this.aQ_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'bQ' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma BQMarginal()
		{
			return this.bQ_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of EObs1 and EObs2 and Nt</summary>
		private void Changed_EObs1_EObs2_Nt()
		{
			if (this.Changed_EObs1_EObs2_Nt_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble62[index0] = Factor.Difference(this.eObs1[index0], this.eObs2[index0]);
				this.vdouble63[index0] = Math.Abs(this.vdouble62[index0]);
			}
			this.Changed_EObs1_EObs2_Nt_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EObs1 and EObs2 and Nt and numberOfIterations and Par and ParPrior and PObs1 and PObs2 and PStd and QObs and QObsVar and S0Prior and SObs</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs(int numberOfIterations)
		{
			if (this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone) {
				return ;
			}
			Bernoulli vBernoulli0 = Bernoulli.Uniform();
			this.evidence_marginal_F = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_B;
			// Create array for 'evidence_selector_cases' Backwards messages.
			evidence_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				evidence_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli[] evidence_selector_cases_0_uses_B;
			// Create array for 'evidence_selector_cases_0_uses' Backwards messages.
			evidence_selector_cases_0_uses_B = new Bernoulli[149];
			evidence_selector_cases_0_uses_B[147] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[146] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[145] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[144] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[143] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[142] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[141] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[140] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[139] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[138] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[137] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[136] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[135] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[134] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[133] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[132] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[131] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[130] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[128] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[127] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[126] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[125] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[124] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[122] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[121] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[120] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[119] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[118] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[117] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[116] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[115] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[114] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[113] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[112] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[111] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[110] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[109] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[108] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[107] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[106] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[105] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[104] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[103] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[100] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[99] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[98] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[97] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[95] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[94] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[93] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[92] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[91] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[90] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[89] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[88] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[85] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[84] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[83] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[82] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[80] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[79] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[78] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[77] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[76] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[75] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[74] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[73] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[72] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[71] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[70] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[69] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[68] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[67] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[66] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[65] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[64] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[63] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[62] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[61] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[60] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[59] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[58] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[57] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[54] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[53] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[52] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[51] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[49] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[48] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[47] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[46] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[45] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[44] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[43] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[42] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[41] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[40] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[39] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Random factor
			evidence_selector_cases_0_uses_B[0] = Bernoulli.FromLogOdds(UnaryOp<Vector>.LogEvidenceRatio<VectorGaussian>(this.par, this.parPrior));
			Bernoulli[][] evidence_selector_cases_0_rep21_uses_B;
			// Create array for 'evidence_selector_cases_0_rep21_uses' Backwards messages.
			evidence_selector_cases_0_rep21_uses_B = new Bernoulli[this.nt][];
			Bernoulli[] evidence_selector_cases_0_rep21_B;
			// Create array for 'evidence_selector_cases_0_rep21' Backwards messages.
			evidence_selector_cases_0_rep21_B = new Bernoulli[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				this.S_uses_F[index0][1] = Gaussian.Uniform();
				this.P_uses_F[index0][0] = Gaussian.Uniform();
				this.P_uses_B[index0][1] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble77_B'
			Gaussian[] vdouble77_B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0==0) {
					vdouble77_B[index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'P_0_0__B'
			Gaussian[] P_0_0__B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0==0) {
					P_0_0__B[index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble83_B'
			Gaussian[] vdouble83_B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0>0) {
					vdouble83_B[index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble82_B'
			Gaussian[] vdouble82_B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0>0) {
					vdouble82_B[index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'P_index0_0__B'
			Gaussian[] P_index0_0__B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0>0) {
					P_index0_0__B[index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'E_0_0__B'
			Gaussian[] E_0_0__B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0==0) {
					E_0_0__B[index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'E_index0_0__B'
			Gaussian[] E_index0_0__B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0>0) {
					E_index0_0__B[index0] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'S_index0Minus1_0__B'
			Gaussian[] S_index0Minus1_0__B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0>0) {
					S_index0Minus1_0__B[index0] = Gaussian.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index0 = 0; index0<this.nt; index0++) { // broken
					if (index0==0) {
						// Message to 'S_use' from Replicate factor
						this.S_use_B[0] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.S_uses_B[0], this.S_use_B[0]);
						index0 = this.nt-1;
						index0 = this.nt-1;
					}
				}
				for(int index0 = this.nt-1; index0>=0; index0--) {
					// Message to 'E_uses' from Replicate factor
					this.E_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.E_uses_B[index0], this.E_F[index0], 1, this.E_uses_F[index0][1]);
					if (index0==0) {
						// Message to 'vdouble78' from Difference factor
						this.vdouble78_F[index0] = DoublePlusOp.AAverageConditional(this.vdouble77_F[index0], this.E_uses_F[0][1]);
						// Message to 'Q_0_0_' from Difference factor
						this.Q_0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble78_F[index0], this.S_use_B[0]);
						// Message to 'Q_uses' from Copy factor
						this.Q_uses_B[0][1] = ArrayHelper.SetTo<Gaussian>(this.Q_uses_B[0][1], this.Q_0_0__B[index0]);
					}
					if (index0>0) {
						// Message to 'S_use' from Replicate factor
						this.S_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.S_uses_B[index0], this.S_use_B[index0]);
						// Message to 'vdouble83' from Difference factor
						this.vdouble83_F[index0] = DoublePlusOp.AAverageConditional(this.vdouble82_F[index0], this.E_uses_F[index0][1]);
						// Message to 'Q_index0_0_' from Difference factor
						this.Q_index0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble83_F[index0], this.S_use_B[index0]);
						// Message to 'Q_uses' from Copy factor
						this.Q_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.Q_uses_B[index0][1], this.Q_index0_0__B[index0]);
					}
					// Message to 'Q_uses' from Replicate factor
					this.Q_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Q_uses_B[index0], this.Q_F[index0], 0, this.Q_uses_F[index0][0]);
					// Message to 'Q_uses' from IsPositive factor
					this.Q_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.Q_uses_F[index0][0]);
					// Message to 'Q_uses' from Replicate factor
					this.Q_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Q_uses_B[index0], this.Q_F[index0], 1, this.Q_uses_F[index0][1]);
					if (index0==0) {
						// Message to 'vdouble78' from Difference factor
						this.vdouble78_B[index0] = DoublePlusOp.SumAverageConditional(this.S_use_B[0], this.Q_uses_F[0][1]);
						// Message to 'vdouble77' from Difference factor
						vdouble77_B[index0] = DoublePlusOp.SumAverageConditional(this.vdouble78_B[index0], this.E_uses_F[0][1]);
						// Message to 'P_0_0_' from Plus factor
						P_0_0__B[index0] = DoublePlusOp.BAverageConditional(vdouble77_B[index0], this.s0Prior);
						// Message to 'P_uses' from Copy factor
						this.P_uses_B[0][1] = ArrayHelper.SetTo<Gaussian>(this.P_uses_B[0][1], P_0_0__B[index0]);
					}
					if (index0>0) {
						// Message to 'vdouble83' from Difference factor
						vdouble83_B[index0] = DoublePlusOp.SumAverageConditional(this.S_use_B[index0], this.Q_uses_F[index0][1]);
						// Message to 'vdouble82' from Difference factor
						vdouble82_B[index0] = DoublePlusOp.SumAverageConditional(vdouble83_B[index0], this.E_uses_F[index0][1]);
						// Message to 'P_index0_0_' from Plus factor
						P_index0_0__B[index0] = DoublePlusOp.BAverageConditional(vdouble82_B[index0], this.S_uses_F[index0-1][0]);
						// Message to 'P_uses' from Copy factor
						this.P_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.P_uses_B[index0][1], P_index0_0__B[index0]);
					}
					// Message to 'P_uses' from Replicate factor
					this.P_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.P_uses_B[index0], this.P_F[index0], 0, this.P_uses_F[index0][0]);
					// Message to 'P_uses' from IsPositive factor
					this.P_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.P_uses_F[index0][0]);
					// Message to 'P_uses' from Replicate factor
					this.P_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.P_uses_B[index0], this.P_F[index0], 1, this.P_uses_F[index0][1]);
					if (index0==0) {
						// Message to 'vdouble77' from Plus factor
						this.vdouble77_F[index0] = DoublePlusOp.SumAverageConditional(this.s0Prior, this.P_uses_F[0][1]);
						// Message to 'E_0_0_' from Difference factor
						E_0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble77_F[index0], this.vdouble78_B[index0]);
						// Message to 'E_uses' from Copy factor
						this.E_uses_B[0][1] = ArrayHelper.SetTo<Gaussian>(this.E_uses_B[0][1], E_0_0__B[index0]);
					}
					if (index0>0) {
						// Message to 'vdouble82' from Plus factor
						this.vdouble82_F[index0] = DoublePlusOp.SumAverageConditional(this.S_uses_F[index0-1][0], this.P_uses_F[index0][1]);
						// Message to 'E_index0_0_' from Difference factor
						E_index0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble82_F[index0], vdouble83_B[index0]);
						// Message to 'E_uses' from Copy factor
						this.E_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.E_uses_B[index0][1], E_index0_0__B[index0]);
					}
					// Message to 'E_uses' from Replicate factor
					this.E_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.E_uses_B[index0], this.E_F[index0], 0, this.E_uses_F[index0][0]);
					// Message to 'E_uses' from IsPositive factor
					this.E_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.E_uses_F[index0][0]);
					if (index0>0) {
						// Message to 'S_index0Minus1_0_' from Plus factor
						S_index0Minus1_0__B[index0] = DoublePlusOp.AAverageConditional(vdouble82_B[index0], this.P_uses_F[index0][1]);
						// Message to 'S_uses' from Copy factor
						this.S_uses_B[index0-1][0] = ArrayHelper.SetTo<Gaussian>(this.S_uses_B[index0-1][0], S_index0Minus1_0__B[index0]);
					}
				}
				for(int index0 = 0; index0<this.nt; index0++) {
					// Message to 'P_uses' from Replicate factor
					this.P_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.P_uses_B[index0], this.P_F[index0], 1, this.P_uses_F[index0][1]);
					if (index0==0) {
						// Message to 'vdouble77' from Plus factor
						this.vdouble77_F[index0] = DoublePlusOp.SumAverageConditional(this.s0Prior, this.P_uses_F[0][1]);
						// Message to 'E_0_0_' from Difference factor
						E_0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble77_F[index0], this.vdouble78_B[index0]);
						// Message to 'E_uses' from Copy factor
						this.E_uses_B[0][1] = ArrayHelper.SetTo<Gaussian>(this.E_uses_B[0][1], E_0_0__B[index0]);
					}
					// Message to 'E_uses' from Replicate factor
					this.E_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.E_uses_B[index0], this.E_F[index0], 0, this.E_uses_F[index0][0]);
					// Message to 'E_uses' from IsPositive factor
					this.E_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.E_uses_F[index0][0]);
					// Message to 'E_uses' from Replicate factor
					this.E_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.E_uses_B[index0], this.E_F[index0], 1, this.E_uses_F[index0][1]);
					if (index0==0) {
						// Message to 'vdouble78' from Difference factor
						this.vdouble78_F[index0] = DoublePlusOp.AAverageConditional(this.vdouble77_F[index0], this.E_uses_F[0][1]);
						// Message to 'Q_0_0_' from Difference factor
						this.Q_0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble78_F[index0], this.S_use_B[0]);
						// Message to 'Q_uses' from Copy factor
						this.Q_uses_B[0][1] = ArrayHelper.SetTo<Gaussian>(this.Q_uses_B[0][1], this.Q_0_0__B[index0]);
					}
					if (index0>0) {
						// Message to 'vdouble82' from Plus factor
						this.vdouble82_F[index0] = DoublePlusOp.SumAverageConditional(this.S_uses_F[index0-1][0], this.P_uses_F[index0][1]);
						// Message to 'vdouble83' from Difference factor
						this.vdouble83_F[index0] = DoublePlusOp.AAverageConditional(this.vdouble82_F[index0], this.E_uses_F[index0][1]);
						// Message to 'Q_index0_0_' from Difference factor
						this.Q_index0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble83_F[index0], this.S_use_B[index0]);
						// Message to 'Q_uses' from Copy factor
						this.Q_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.Q_uses_B[index0][1], this.Q_index0_0__B[index0]);
					}
					// Message to 'Q_uses' from Replicate factor
					this.Q_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Q_uses_B[index0], this.Q_F[index0], 0, this.Q_uses_F[index0][0]);
					// Message to 'Q_uses' from IsPositive factor
					this.Q_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.Q_uses_F[index0][0]);
					// Message to 'Q_uses' from Replicate factor
					this.Q_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Q_uses_B[index0], this.Q_F[index0], 1, this.Q_uses_F[index0][1]);
					if (index0==0) {
						// Message to 'vdouble78' from Difference factor
						this.vdouble78_B[index0] = DoublePlusOp.SumAverageConditional(this.S_use_B[0], this.Q_uses_F[0][1]);
						// Message to 'vdouble77' from Difference factor
						vdouble77_B[index0] = DoublePlusOp.SumAverageConditional(this.vdouble78_B[index0], this.E_uses_F[0][1]);
						// Message to 'P_0_0_' from Plus factor
						P_0_0__B[index0] = DoublePlusOp.BAverageConditional(vdouble77_B[index0], this.s0Prior);
						// Message to 'P_uses' from Copy factor
						this.P_uses_B[0][1] = ArrayHelper.SetTo<Gaussian>(this.P_uses_B[0][1], P_0_0__B[index0]);
					}
					if (index0>0) {
						// Message to 'vdouble83' from Difference factor
						vdouble83_B[index0] = DoublePlusOp.SumAverageConditional(this.S_use_B[index0], this.Q_uses_F[index0][1]);
						// Message to 'vdouble82' from Difference factor
						vdouble82_B[index0] = DoublePlusOp.SumAverageConditional(vdouble83_B[index0], this.E_uses_F[index0][1]);
						// Message to 'P_index0_0_' from Plus factor
						P_index0_0__B[index0] = DoublePlusOp.BAverageConditional(vdouble82_B[index0], this.S_uses_F[index0-1][0]);
						// Message to 'P_uses' from Copy factor
						this.P_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.P_uses_B[index0][1], P_index0_0__B[index0]);
						// Message to 'E_index0_0_' from Difference factor
						E_index0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble82_F[index0], vdouble83_B[index0]);
						// Message to 'E_uses' from Copy factor
						this.E_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.E_uses_B[index0][1], E_index0_0__B[index0]);
					}
					// Message to 'P_uses' from Replicate factor
					this.P_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.P_uses_B[index0], this.P_F[index0], 0, this.P_uses_F[index0][0]);
					if (index0>0) {
						// Message to 'S_index0_0_' from Difference factor
						this.S_index0_0__F[index0] = DoublePlusOp.AAverageConditional(this.vdouble83_F[index0], this.Q_uses_F[index0][1]);
						// Message to 'S_uses' from Replicate factor
						this.S_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.S_uses_B[index0], this.S_index0_0__F[index0], 0, this.S_uses_F[index0][0]);
					}
					if (index0==0) {
						// Message to 'S_0_0_' from Difference factor
						this.S_0_0__F[index0] = DoublePlusOp.AAverageConditional(this.vdouble78_F[index0], this.Q_uses_F[0][1]);
						// Message to 'S_uses' from Replicate factor
						this.S_uses_F[0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.S_uses_B[0], this.S_0_0__F[index0], 0, this.S_uses_F[0][0]);
					}
					// Message to 'P_uses' from IsPositive factor
					this.P_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.P_uses_F[index0][0]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'evidence_selector_cases_0_rep21_uses' Backwards messages.
				evidence_selector_cases_0_rep21_uses_B[index0] = new Bernoulli[3];
				evidence_selector_cases_0_rep21_uses_B[index0][1] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep21_uses_B[index0][0] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep21_uses_B[index0][2] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep21_uses' from Replicate factor
				evidence_selector_cases_0_rep21_uses_B[index0][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.P_uses_B[index0], this.P_F[index0], this.P_uses_F[index0]));
				evidence_selector_cases_0_rep21_B[index0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep21' from Replicate factor
				evidence_selector_cases_0_rep21_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep21_uses_B[index0], evidence_selector_cases_0_rep21_B[index0]);
			}
			evidence_selector_cases_0_uses_B[50] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[50] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep21_B, evidence_selector_cases_0_uses_B[50]);
			Bernoulli[] evidence_selector_cases_0_rep23_B;
			// Create array for 'evidence_selector_cases_0_rep23' Backwards messages.
			evidence_selector_cases_0_rep23_B = new Bernoulli[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				evidence_selector_cases_0_rep23_B[index0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep23' from IsPositive factor
				evidence_selector_cases_0_rep23_B[index0] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(true, this.P_uses_F[index0][0]));
			}
			evidence_selector_cases_0_uses_B[55] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[55] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep23_B, evidence_selector_cases_0_uses_B[55]);
			bool vbool1_reduced = default(bool);
			if (this.nt>0) {
				vbool1_reduced = true;
			}
			Bernoulli evidence_selector_cases_0_rep24_B_reduced;
			evidence_selector_cases_0_rep24_B_reduced = default(Bernoulli);
			if (this.nt>0) {
				evidence_selector_cases_0_rep24_B_reduced = Bernoulli.Uniform();
			}
			Bernoulli[] evidence_selector_cases_0_rep24_B;
			// Create array for 'evidence_selector_cases_0_rep24' Backwards messages.
			evidence_selector_cases_0_rep24_B = new Bernoulli[this.nt];
			if (this.nt>0) {
				// Message to 'evidence_selector_cases_0_rep24' from Equal factor
				evidence_selector_cases_0_rep24_B_reduced = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, vbool1_reduced));
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				evidence_selector_cases_0_rep24_B[index0] = evidence_selector_cases_0_rep24_B_reduced;
				evidence_selector_cases_0_rep24_B[index0] = evidence_selector_cases_0_rep24_B_reduced;
			}
			evidence_selector_cases_0_uses_B[56] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[56] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep24_B, evidence_selector_cases_0_uses_B[56]);
			Bernoulli[][] evidence_selector_cases_0_rep49_uses_B;
			// Create array for 'evidence_selector_cases_0_rep49_uses' Backwards messages.
			evidence_selector_cases_0_rep49_uses_B = new Bernoulli[this.nt][];
			Bernoulli[] evidence_selector_cases_0_rep49_B;
			// Create array for 'evidence_selector_cases_0_rep49' Backwards messages.
			evidence_selector_cases_0_rep49_B = new Bernoulli[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'evidence_selector_cases_0_rep49_uses' Backwards messages.
				evidence_selector_cases_0_rep49_uses_B[index0] = new Bernoulli[3];
				evidence_selector_cases_0_rep49_uses_B[index0][1] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep49_uses_B[index0][0] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep49_uses_B[index0][2] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep49_uses' from Replicate factor
				evidence_selector_cases_0_rep49_uses_B[index0][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.E_uses_B[index0], this.E_F[index0], this.E_uses_F[index0]));
				evidence_selector_cases_0_rep49_B[index0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep49' from Replicate factor
				evidence_selector_cases_0_rep49_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep49_uses_B[index0], evidence_selector_cases_0_rep49_B[index0]);
			}
			evidence_selector_cases_0_uses_B[81] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[81] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep49_B, evidence_selector_cases_0_uses_B[81]);
			Bernoulli[] evidence_selector_cases_0_rep51_B;
			// Create array for 'evidence_selector_cases_0_rep51' Backwards messages.
			evidence_selector_cases_0_rep51_B = new Bernoulli[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				evidence_selector_cases_0_rep51_B[index0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep51' from IsPositive factor
				evidence_selector_cases_0_rep51_B[index0] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(true, this.E_uses_F[index0][0]));
			}
			evidence_selector_cases_0_uses_B[86] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[86] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep51_B, evidence_selector_cases_0_uses_B[86]);
			bool vbool3_reduced = default(bool);
			if (this.nt>0) {
				vbool3_reduced = true;
			}
			Bernoulli evidence_selector_cases_0_rep52_B_reduced;
			evidence_selector_cases_0_rep52_B_reduced = default(Bernoulli);
			if (this.nt>0) {
				evidence_selector_cases_0_rep52_B_reduced = Bernoulli.Uniform();
			}
			Bernoulli[] evidence_selector_cases_0_rep52_B;
			// Create array for 'evidence_selector_cases_0_rep52' Backwards messages.
			evidence_selector_cases_0_rep52_B = new Bernoulli[this.nt];
			if (this.nt>0) {
				// Message to 'evidence_selector_cases_0_rep52' from Equal factor
				evidence_selector_cases_0_rep52_B_reduced = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, vbool3_reduced));
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				evidence_selector_cases_0_rep52_B[index0] = evidence_selector_cases_0_rep52_B_reduced;
				evidence_selector_cases_0_rep52_B[index0] = evidence_selector_cases_0_rep52_B_reduced;
			}
			evidence_selector_cases_0_uses_B[87] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[87] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep52_B, evidence_selector_cases_0_uses_B[87]);
			Bernoulli[][] evidence_selector_cases_0_rep61_uses_B;
			// Create array for 'evidence_selector_cases_0_rep61_uses' Backwards messages.
			evidence_selector_cases_0_rep61_uses_B = new Bernoulli[this.nt][];
			Bernoulli[] evidence_selector_cases_0_rep61_B;
			// Create array for 'evidence_selector_cases_0_rep61' Backwards messages.
			evidence_selector_cases_0_rep61_B = new Bernoulli[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'evidence_selector_cases_0_rep61_uses' Backwards messages.
				evidence_selector_cases_0_rep61_uses_B[index0] = new Bernoulli[3];
				evidence_selector_cases_0_rep61_uses_B[index0][1] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep61_uses_B[index0][0] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep61_uses_B[index0][2] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep61_uses' from Replicate factor
				evidence_selector_cases_0_rep61_uses_B[index0][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.Q_uses_B[index0], this.Q_F[index0], this.Q_uses_F[index0]));
				evidence_selector_cases_0_rep61_B[index0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep61' from Replicate factor
				evidence_selector_cases_0_rep61_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep61_uses_B[index0], evidence_selector_cases_0_rep61_B[index0]);
			}
			evidence_selector_cases_0_uses_B[96] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[96] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep61_B, evidence_selector_cases_0_uses_B[96]);
			Bernoulli[] evidence_selector_cases_0_rep63_B;
			// Create array for 'evidence_selector_cases_0_rep63' Backwards messages.
			evidence_selector_cases_0_rep63_B = new Bernoulli[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				evidence_selector_cases_0_rep63_B[index0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep63' from IsPositive factor
				evidence_selector_cases_0_rep63_B[index0] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(true, this.Q_uses_F[index0][0]));
			}
			evidence_selector_cases_0_uses_B[101] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[101] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep63_B, evidence_selector_cases_0_uses_B[101]);
			bool vbool5_reduced = default(bool);
			if (this.nt>0) {
				vbool5_reduced = true;
			}
			Bernoulli evidence_selector_cases_0_rep64_B_reduced;
			evidence_selector_cases_0_rep64_B_reduced = default(Bernoulli);
			if (this.nt>0) {
				evidence_selector_cases_0_rep64_B_reduced = Bernoulli.Uniform();
			}
			Bernoulli[] evidence_selector_cases_0_rep64_B;
			// Create array for 'evidence_selector_cases_0_rep64' Backwards messages.
			evidence_selector_cases_0_rep64_B = new Bernoulli[this.nt];
			if (this.nt>0) {
				// Message to 'evidence_selector_cases_0_rep64' from Equal factor
				evidence_selector_cases_0_rep64_B_reduced = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, vbool5_reduced));
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				evidence_selector_cases_0_rep64_B[index0] = evidence_selector_cases_0_rep64_B_reduced;
				evidence_selector_cases_0_rep64_B[index0] = evidence_selector_cases_0_rep64_B_reduced;
			}
			evidence_selector_cases_0_uses_B[102] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[102] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep64_B, evidence_selector_cases_0_uses_B[102]);
			Bernoulli[][] evidence_selector_cases_0_rep69_uses_B;
			// Create array for 'evidence_selector_cases_0_rep69_uses' Backwards messages.
			evidence_selector_cases_0_rep69_uses_B = new Bernoulli[this.nt][];
			Bernoulli[] evidence_selector_cases_0_rep69_B;
			// Create array for 'evidence_selector_cases_0_rep69' Backwards messages.
			evidence_selector_cases_0_rep69_B = new Bernoulli[this.nt];
			Bernoulli[] evidence_selector_cases_0_rep88_B;
			// Create array for 'evidence_selector_cases_0_rep88' Backwards messages.
			evidence_selector_cases_0_rep88_B = new Bernoulli[this.nt];
			// Create array for replicates of 'vdouble94_F'
			Gaussian[] vdouble94_F = new Gaussian[this.nt];
			evidence_selector_cases_0_uses_B[123] = Bernoulli.Uniform();
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0==0) {
					// Message to 'S_uses' from Replicate factor
					this.S_uses_F[0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.S_uses_B[0], this.S_0_0__F[index0], 1, this.S_uses_F[0][1]);
					// Message to 'evidence_selector_cases_0_uses' from Replicate factor
					evidence_selector_cases_0_uses_B[123] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.S_uses_B[0], this.S_0_0__F[index0], this.S_uses_F[0]));
				}
				// Create array for 'evidence_selector_cases_0_rep69_uses' Backwards messages.
				evidence_selector_cases_0_rep69_uses_B[index0] = new Bernoulli[8];
				evidence_selector_cases_0_rep69_uses_B[index0][7] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep69_uses_B[index0][5] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep69_uses_B[index0][4] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep69_uses_B[index0][3] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep69_uses_B[index0][2] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep69_uses_B[index0][1] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep69_uses_B[index0][0] = Bernoulli.Uniform();
				if (index0>0) {
					// Message to 'S_uses' from Replicate factor
					this.S_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.S_uses_B[index0], this.S_index0_0__F[index0], 1, this.S_uses_F[index0][1]);
				}
				evidence_selector_cases_0_rep69_uses_B[index0][6] = Bernoulli.Uniform();
				if (index0>0) {
					// Message to 'evidence_selector_cases_0_rep69_uses' from Replicate factor
					evidence_selector_cases_0_rep69_uses_B[index0][6] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.S_uses_B[index0], this.S_index0_0__F[index0], this.S_uses_F[index0]));
				}
				evidence_selector_cases_0_rep69_B[index0] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep69' from Replicate factor
				evidence_selector_cases_0_rep69_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep69_uses_B[index0], evidence_selector_cases_0_rep69_B[index0]);
				evidence_selector_cases_0_rep88_B[index0] = Bernoulli.Uniform();
				if (!this.vbool9[index0]) {
					vdouble94_F[index0] = Gaussian.Uniform();
					// Message to 'vdouble94' from Plus factor
					vdouble94_F[index0] = DoublePlusOp.SumAverageConditional(this.S_uses_F[index0][1], this.vdouble93[index0]);
					// Message to 'evidence_selector_cases_0_rep88' from GaussianFromMeanAndVariance factor
					evidence_selector_cases_0_rep88_B[index0] = Bernoulli.FromLogOdds(GaussianFromMeanAndVarianceOp.LogEvidenceRatio(this.sObs[index0], vdouble94_F[index0], this.vdouble95[index0]));
				}
			}
			evidence_selector_cases_0_uses_B[129] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[129] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep69_B, evidence_selector_cases_0_uses_B[129]);
			evidence_selector_cases_0_uses_B[148] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[148] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep88_B, evidence_selector_cases_0_uses_B[148]);
			Bernoulli evidence_selector_cases_0_B = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0' from Replicate factor
			evidence_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_uses_B, evidence_selector_cases_0_B);
			// Message to 'evidence_selector_cases' from Copy factor
			evidence_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(evidence_selector_cases_B[0], evidence_selector_cases_0_B);
			Bernoulli evidence_selector_B = default(Bernoulli);
			// Message to 'evidence_selector' from Cases factor
			evidence_selector_B = CasesOp.BAverageConditional(evidence_selector_cases_B);
			// Message to 'evidence_marginal' from Variable factor
			this.evidence_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(evidence_selector_B, vBernoulli0, this.evidence_marginal_F);
			this.S0_marginal_F = Gaussian.Uniform();
			Gaussian S0_use_B = Gaussian.Uniform();
			// Create array for replicates of 'S0_0__B'
			Gaussian[] S0_0__B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0==0) {
					S0_0__B[index0] = Gaussian.Uniform();
					// Message to 'S0_0_' from Plus factor
					S0_0__B[index0] = DoublePlusOp.AAverageConditional(vdouble77_B[index0], this.P_uses_F[0][1]);
					// Message to 'S0_use' from Copy factor
					S0_use_B = ArrayHelper.SetTo<Gaussian>(S0_use_B, S0_0__B[index0]);
				}
			}
			// Message to 'S0_marginal' from Variable factor
			this.S0_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(S0_use_B, this.s0Prior, this.S0_marginal_F);
			// Create array for 'P_marginal' Forwards messages.
			this.P_marginal_F = new DistributionStructArray<Gaussian,double>(this.nt);
			DistributionStructArray<Gaussian,double> P_use_B;
			// Create array for 'P_use' Backwards messages.
			P_use_B = new DistributionStructArray<Gaussian,double>(this.nt);
			for(int index0 = 0; index0<this.nt; index0++) {
				this.P_marginal_F[index0] = Gaussian.Uniform();
				P_use_B[index0] = Gaussian.Uniform();
				// Message to 'P_use' from Replicate factor
				P_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.P_uses_B[index0], P_use_B[index0]);
				// Message to 'P_marginal' from Variable factor
				this.P_marginal_F[index0] = VariableOp.MarginalAverageConditional<Gaussian>(P_use_B[index0], this.P_F[index0], this.P_marginal_F[index0]);
			}
			// Create array for 'E_marginal' Forwards messages.
			this.E_marginal_F = new DistributionStructArray<Gaussian,double>(this.nt);
			DistributionStructArray<Gaussian,double> E_use_B;
			// Create array for 'E_use' Backwards messages.
			E_use_B = new DistributionStructArray<Gaussian,double>(this.nt);
			for(int index0 = 0; index0<this.nt; index0++) {
				this.E_marginal_F[index0] = Gaussian.Uniform();
				E_use_B[index0] = Gaussian.Uniform();
				// Message to 'E_use' from Replicate factor
				E_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.E_uses_B[index0], E_use_B[index0]);
				// Message to 'E_marginal' from Variable factor
				this.E_marginal_F[index0] = VariableOp.MarginalAverageConditional<Gaussian>(E_use_B[index0], this.E_F[index0], this.E_marginal_F[index0]);
			}
			// Create array for 'Q_marginal' Forwards messages.
			this.Q_marginal_F = new DistributionStructArray<Gaussian,double>(this.nt);
			DistributionStructArray<Gaussian,double> Q_use_B;
			// Create array for 'Q_use' Backwards messages.
			Q_use_B = new DistributionStructArray<Gaussian,double>(this.nt);
			for(int index0 = 0; index0<this.nt; index0++) {
				this.Q_marginal_F[index0] = Gaussian.Uniform();
				Q_use_B[index0] = Gaussian.Uniform();
				// Message to 'Q_use' from Replicate factor
				Q_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Q_uses_B[index0], Q_use_B[index0]);
				// Message to 'Q_marginal' from Variable factor
				this.Q_marginal_F[index0] = VariableOp.MarginalAverageConditional<Gaussian>(Q_use_B[index0], this.Q_F[index0], this.Q_marginal_F[index0]);
			}
			// Create array for 'S_marginal' Forwards messages.
			this.S_marginal_F = new DistributionStructArray<Gaussian,double>(this.nt);
			for(int index0 = 0; index0<this.nt; index0++) {
				this.S_marginal_F[index0] = Gaussian.Uniform();
				if (index0==0) {
					// Message to 'S_marginal' from DerivedVariable factor
					this.S_marginal_F[0] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.S_use_B[0], this.S_0_0__F[index0], this.S_marginal_F[0]);
				}
				if (index0>0) {
					// Message to 'S_marginal' from DerivedVariable factor
					this.S_marginal_F[index0] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.S_use_B[index0], this.S_index0_0__F[index0], this.S_marginal_F[index0]);
				}
			}
			this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EObs1 and EObs2 and Nt and numberOfIterationsDecreased and Par and PObs1 and PObs2 and PStd and QObs and QObsVar and S0Prior and SObs and must reset on changes to ParPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21(bool initialise)
		{
			if (this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone&&((!initialise)||this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				if (index0>0) {
					// Message to 'S_uses' from Replicate factor
					this.S_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.S_uses_B[index0], this.S_index0_0__F[index0], 0, this.S_uses_F[index0][0]);
				}
				// Message to 'E_uses' from Replicate factor
				this.E_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.E_uses_B[index0], this.E_F[index0], 0, this.E_uses_F[index0][0]);
				// Message to 'E_uses' from IsPositive factor
				this.E_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.E_uses_F[index0][0]);
				// Message to 'E_uses' from Replicate factor
				this.E_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.E_uses_B[index0], this.E_F[index0], 1, this.E_uses_F[index0][1]);
				// Message to 'P_uses' from Replicate factor
				this.P_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.P_uses_B[index0], this.P_F[index0], 1, this.P_uses_F[index0][1]);
				if (index0==0) {
					// Message to 'vdouble77' from Plus factor
					this.vdouble77_F[index0] = DoublePlusOp.SumAverageConditional(this.s0Prior, this.P_uses_F[0][1]);
					// Message to 'vdouble78' from Difference factor
					this.vdouble78_F[index0] = DoublePlusOp.AAverageConditional(this.vdouble77_F[index0], this.E_uses_F[0][1]);
					// Message to 'Q_0_0_' from Difference factor
					this.Q_0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble78_F[index0], this.S_use_B[0]);
					// Message to 'Q_uses' from Copy factor
					this.Q_uses_B[0][1] = ArrayHelper.SetTo<Gaussian>(this.Q_uses_B[0][1], this.Q_0_0__B[index0]);
				}
				if (index0>0) {
					// Message to 'vdouble82' from Plus factor
					this.vdouble82_F[index0] = DoublePlusOp.SumAverageConditional(this.S_uses_F[index0-1][0], this.P_uses_F[index0][1]);
					// Message to 'vdouble83' from Difference factor
					this.vdouble83_F[index0] = DoublePlusOp.AAverageConditional(this.vdouble82_F[index0], this.E_uses_F[index0][1]);
					// Message to 'Q_index0_0_' from Difference factor
					this.Q_index0_0__B[index0] = DoublePlusOp.BAverageConditional(this.vdouble83_F[index0], this.S_use_B[index0]);
					// Message to 'Q_uses' from Copy factor
					this.Q_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.Q_uses_B[index0][1], this.Q_index0_0__B[index0]);
				}
				// Message to 'Q_uses' from Replicate factor
				this.Q_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Q_uses_B[index0], this.Q_F[index0], 0, this.Q_uses_F[index0][0]);
				// Message to 'Q_uses' from IsPositive factor
				this.Q_uses_B[index0][0] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.Q_uses_F[index0][0]);
				// Message to 'Q_uses' from Replicate factor
				this.Q_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Q_uses_B[index0], this.Q_F[index0], 1, this.Q_uses_F[index0][1]);
				if (index0==0) {
					// Message to 'S_0_0_' from Difference factor
					this.S_0_0__F[index0] = DoublePlusOp.AAverageConditional(this.vdouble78_F[index0], this.Q_uses_F[0][1]);
					// Message to 'S_uses' from Replicate factor
					this.S_uses_F[0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.S_uses_B[0], this.S_0_0__F[index0], 0, this.S_uses_F[0][0]);
					// Message to 'vdouble78' from Difference factor
					this.vdouble78_B[index0] = DoublePlusOp.SumAverageConditional(this.S_use_B[0], this.Q_uses_F[0][1]);
				}
			}
			for(int index0 = this.nt-1; index0>=0; index0--) {
				if (index0>0) {
					// Message to 'vdouble82' from Plus factor
					this.vdouble82_F[index0] = DoublePlusOp.SumAverageConditional(this.S_uses_F[index0-1][0], this.P_uses_F[index0][1]);
				}
			}
			this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = true;
			this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EObs1 and EObs2 and Nt and Par</summary>
		private void Changed_EObs1_EObs2_Nt_Par()
		{
			if (this.Changed_EObs1_EObs2_Nt_Par_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble56[index0] = Factor.Plus(this.vdouble53[index0], this.vdouble55[index0]);
				this.vdouble57[index0] = Factor.Product(this.fE, this.vdouble56[index0]);
				this.vdouble59[index0] = Factor.Product(0.10000000000000001, this.vdouble57[index0]);
				this.vdouble64[index0] = Factor.Product(this.vdouble61_reduced, this.vdouble63[index0]);
				this.vdouble65[index0] = Math.Max(this.vdouble59[index0], this.vdouble64[index0]);
				this.vdouble66[index0] = Factor.Product(this.vdouble65[index0], this.vdouble65[index0]);
				// Message to 'E' from GaussianFromMeanAndVariance factor
				this.E_F[index0] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.vdouble57[index0], this.vdouble66[index0]);
			}
			this.Changed_EObs1_EObs2_Nt_Par_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EObs1 and Nt and Par</summary>
		private void Changed_EObs1_Nt_Par()
		{
			if (this.Changed_EObs1_Nt_Par_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble53[index0] = Factor.Product(this.vdouble51_reduced, this.eObs1[index0]);
			}
			this.Changed_EObs1_Nt_Par_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EObs2 and Nt and Par</summary>
		private void Changed_EObs2_Nt_Par()
		{
			if (this.Changed_EObs2_Nt_Par_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble55[index0] = Factor.Product(this.wE, this.eObs2[index0]);
			}
			this.Changed_EObs2_Nt_Par_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt</summary>
		private void Changed_Nt()
		{
			if (this.Changed_Nt_isDone) {
				return ;
			}
			// Create array for 'S_use' Backwards messages.
			this.S_use_B = new DistributionStructArray<Gaussian,double>(this.nt);
			// Create array for 'S_uses' Backwards messages.
			this.S_uses_B = new Gaussian[this.nt][];
			// Create array for replicates of 'vbool9'
			this.vbool9 = new bool[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'S_uses' Backwards messages.
				this.S_uses_B[index0] = new Gaussian[2];
			}
			// Create array for 'S_uses' Forwards messages.
			this.S_uses_F = new Gaussian[this.nt][];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'S_uses' Forwards messages.
				this.S_uses_F[index0] = new Gaussian[2];
			}
			// Create array for replicates of 'S_index0_0__F'
			this.S_index0_0__F = new Gaussian[this.nt];
			// Create array for 'E_uses' Forwards messages.
			this.E_uses_F = new Gaussian[this.nt][];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'E_uses' Forwards messages.
				this.E_uses_F[index0] = new Gaussian[2];
			}
			// Create array for 'E_uses' Backwards messages.
			this.E_uses_B = new Gaussian[this.nt][];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'E_uses' Backwards messages.
				this.E_uses_B[index0] = new Gaussian[2];
			}
			// Create array for replicates of 'vdouble53'
			this.vdouble53 = new double[this.nt];
			this.vdouble51_reduced = default(double);
			// Create array for replicates of 'vdouble55'
			this.vdouble55 = new double[this.nt];
			// Create array for replicates of 'vdouble56'
			this.vdouble56 = new double[this.nt];
			// Create array for replicates of 'vdouble57'
			this.vdouble57 = new double[this.nt];
			// Create array for 'E' Forwards messages.
			this.E_F = new DistributionStructArray<Gaussian,double>(this.nt);
			// Create array for replicates of 'vdouble59'
			this.vdouble59 = new double[this.nt];
			// Create array for replicates of 'vdouble62'
			this.vdouble62 = new double[this.nt];
			// Create array for replicates of 'vdouble63'
			this.vdouble63 = new double[this.nt];
			// Create array for replicates of 'vdouble64'
			this.vdouble64 = new double[this.nt];
			this.vdouble61_reduced = default(double);
			// Create array for replicates of 'vdouble65'
			this.vdouble65 = new double[this.nt];
			// Create array for replicates of 'vdouble66'
			this.vdouble66 = new double[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				this.E_F[index0] = Gaussian.Uniform();
			}
			// Create array for 'P_uses' Forwards messages.
			this.P_uses_F = new Gaussian[this.nt][];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'P_uses' Forwards messages.
				this.P_uses_F[index0] = new Gaussian[2];
			}
			// Create array for replicates of 'vdouble38'
			this.vdouble38 = new double[this.nt];
			// Create array for replicates of 'vdouble36'
			this.vdouble36 = new double[this.nt];
			this.vdouble34_reduced = default(double);
			// Create array for replicates of 'vdouble39'
			this.vdouble39 = new double[this.nt];
			// Create array for replicates of 'vdouble43'
			this.vdouble43 = new double[this.nt];
			// Create array for replicates of 'vdouble44'
			this.vdouble44 = new double[this.nt];
			// Create array for replicates of 'vdouble45'
			this.vdouble45 = new double[this.nt];
			this.vdouble42_reduced = default(double);
			// Create array for replicates of 'vdouble46'
			this.vdouble46 = new double[this.nt];
			// Create array for 'P' Forwards messages.
			this.P_F = new DistributionStructArray<Gaussian,double>(this.nt);
			// Create array for replicates of 'vdouble47'
			this.vdouble47 = new double[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				this.P_F[index0] = Gaussian.Uniform();
			}
			// Create array for 'P_uses' Backwards messages.
			this.P_uses_B = new Gaussian[this.nt][];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'P_uses' Backwards messages.
				this.P_uses_B[index0] = new Gaussian[2];
			}
			// Create array for replicates of 'vdouble77_F'
			this.vdouble77_F = new Gaussian[this.nt];
			// Create array for replicates of 'vdouble78_F'
			this.vdouble78_F = new Gaussian[this.nt];
			// Create array for replicates of 'Q_0_0__B'
			this.Q_0_0__B = new Gaussian[this.nt];
			// Create array for 'Q_uses' Backwards messages.
			this.Q_uses_B = new Gaussian[this.nt][];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'Q_uses' Backwards messages.
				this.Q_uses_B[index0] = new Gaussian[2];
			}
			// Create array for replicates of 'vdouble82_F'
			this.vdouble82_F = new Gaussian[this.nt];
			// Create array for replicates of 'vdouble83_F'
			this.vdouble83_F = new Gaussian[this.nt];
			// Create array for replicates of 'Q_index0_0__B'
			this.Q_index0_0__B = new Gaussian[this.nt];
			// Create array for 'Q_uses' Forwards messages.
			this.Q_uses_F = new Gaussian[this.nt][];
			for(int index0 = 0; index0<this.nt; index0++) {
				// Create array for 'Q_uses' Forwards messages.
				this.Q_uses_F[index0] = new Gaussian[2];
			}
			// Create array for replicates of 'vdouble72'
			this.vdouble72 = new double[this.nt];
			// Create array for 'Q' Forwards messages.
			this.Q_F = new DistributionStructArray<Gaussian,double>(this.nt);
			// Create array for replicates of 'vdouble71_F'
			this.vdouble71_F = new Gaussian[this.nt];
			// Create array for replicates of 'vdouble73'
			this.vdouble73 = new double[this.nt];
			// Create array for replicates of 'vdouble74'
			this.vdouble74 = new double[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble71_F[index0] = Gaussian.Uniform();
				this.Q_F[index0] = Gaussian.Uniform();
			}
			// Create array for replicates of 'S_0_0__F'
			this.S_0_0__F = new Gaussian[this.nt];
			// Create array for replicates of 'vdouble78_B'
			this.vdouble78_B = new Gaussian[this.nt];
			this.Changed_Nt_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and numberOfIterationsDecreased and must reset on changes to EObs1 and EObs2 and Par and ParPrior and PObs1 and PObs2 and PStd and QObs and QObsVar and S0Prior and SObs</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3(bool initialise)
		{
			if (this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isDone&&((!initialise)||this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.S_use_B[index0] = Gaussian.Uniform();
				this.S_uses_B[index0][0] = Gaussian.Uniform();
				this.S_uses_F[index0][0] = Gaussian.Uniform();
				if (index0>0) {
					this.S_index0_0__F[index0] = Gaussian.Uniform();
				}
				this.E_uses_F[index0][0] = Gaussian.Uniform();
				this.E_uses_F[index0][1] = Gaussian.Uniform();
				this.E_uses_B[index0][1] = Gaussian.Uniform();
				this.E_uses_B[index0][0] = Gaussian.Uniform();
				this.P_uses_F[index0][1] = Gaussian.Uniform();
				this.P_uses_B[index0][0] = Gaussian.Uniform();
				if (index0==0) {
					this.vdouble77_F[index0] = Gaussian.Uniform();
					this.vdouble78_F[index0] = Gaussian.Uniform();
					this.Q_0_0__B[index0] = Gaussian.Uniform();
				}
				this.Q_uses_B[index0][1] = Gaussian.Uniform();
				this.Q_uses_B[index0][0] = Gaussian.Uniform();
				if (index0>0) {
					this.vdouble82_F[index0] = Gaussian.Uniform();
					this.vdouble83_F[index0] = Gaussian.Uniform();
					this.Q_index0_0__B[index0] = Gaussian.Uniform();
				}
				this.Q_uses_F[index0][0] = Gaussian.Uniform();
				this.Q_uses_F[index0][1] = Gaussian.Uniform();
				if (index0==0) {
					this.S_0_0__F[index0] = Gaussian.Uniform();
					this.vdouble78_B[index0] = Gaussian.Uniform();
				}
			}
			this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isDone = true;
			this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and numberOfIterationsDecreased and Par and PObs1 and PObs2 and PStd and must reset on changes to EObs1 and EObs2 and ParPrior and QObs and QObsVar and S0Prior and SObs</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22(bool initialise)
		{
			if (this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone&&((!initialise)||this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised)) {
				return ;
			}
			for(int index0 = this.nt-1; index0>=0; index0--) {
				// Message to 'P_uses' from Replicate factor
				this.P_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.P_uses_B[index0], this.P_F[index0], 1, this.P_uses_F[index0][1]);
			}
			this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone = true;
			this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and numberOfIterationsDecreased and Par and PObs1 and PObs2 and PStd and S0Prior and must reset on changes to EObs1 and EObs2 and ParPrior and QObs and QObsVar and SObs</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23(bool initialise)
		{
			if (this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone&&((!initialise)||this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised)) {
				return ;
			}
			for(int index0 = this.nt-1; index0>=0; index0--) {
				if (index0==0) {
					// Message to 'vdouble77' from Plus factor
					this.vdouble77_F[index0] = DoublePlusOp.SumAverageConditional(this.s0Prior, this.P_uses_F[0][1]);
				}
			}
			this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = true;
			this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and numberOfIterationsDecreased and Par and SObs and must reset on changes to EObs1 and EObs2 and ParPrior and PObs1 and PObs2 and PStd and QObs and QObsVar and S0Prior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17(bool initialise)
		{
			if (this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isDone&&((!initialise)||this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) { // broken
				if (index0==0) {
					// Message to 'S_use' from Replicate factor
					this.S_use_B[0] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.S_uses_B[0], this.S_use_B[0]);
					index0 = this.nt-1;
					index0 = this.nt-1;
				}
			}
			for(int index0 = this.nt-1; index0>=0; index0--) {
				if (index0>0) {
					// Message to 'S_use' from Replicate factor
					this.S_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.S_uses_B[index0], this.S_use_B[index0]);
				}
			}
			this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isDone = true;
			this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par</summary>
		private void Changed_Nt_Par()
		{
			if (this.Changed_Nt_Par_isDone) {
				return ;
			}
			if (this.nt>0) {
				this.vdouble51_reduced = Factor.Difference(1.0, this.wE);
				this.vdouble61_reduced = Factor.Product(this.rE, 0.5);
				this.vdouble34_reduced = Factor.Difference(1.0, this.wP);
				this.vdouble42_reduced = Factor.Product(this.rP, 0.5);
			}
			this.Changed_Nt_Par_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par and PObs1</summary>
		private void Changed_Nt_Par_PObs1()
		{
			if (this.Changed_Nt_Par_PObs1_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble36[index0] = Factor.Product(this.vdouble34_reduced, this.pObs1[index0]);
			}
			this.Changed_Nt_Par_PObs1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par and PObs1 and PObs2</summary>
		private void Changed_Nt_Par_PObs1_PObs2()
		{
			if (this.Changed_Nt_Par_PObs1_PObs2_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble39[index0] = Factor.Plus(this.vdouble36[index0], this.vdouble38[index0]);
				this.vdouble45[index0] = Factor.Product(this.vdouble42_reduced, this.vdouble44[index0]);
			}
			this.Changed_Nt_Par_PObs1_PObs2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par and PObs1 and PObs2 and PStd</summary>
		private void Changed_Nt_Par_PObs1_PObs2_PStd()
		{
			if (this.Changed_Nt_Par_PObs1_PObs2_PStd_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble46[index0] = Math.Max(this.pStd[index0], this.vdouble45[index0]);
				this.vdouble47[index0] = Factor.Product(this.vdouble46[index0], this.vdouble46[index0]);
				// Message to 'P' from GaussianFromMeanAndVariance factor
				this.P_F[index0] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.vdouble39[index0], this.vdouble47[index0]);
			}
			this.Changed_Nt_Par_PObs1_PObs2_PStd_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par and PObs2</summary>
		private void Changed_Nt_Par_PObs2()
		{
			if (this.Changed_Nt_Par_PObs2_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble38[index0] = Factor.Product(this.wP, this.pObs2[index0]);
			}
			this.Changed_Nt_Par_PObs2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par and QObs</summary>
		private void Changed_Nt_Par_QObs()
		{
			if (this.Changed_Nt_Par_QObs_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble72[index0] = Factor.Product(this.aQ, this.qObs[index0]);
				this.vdouble73[index0] = Factor.Plus(this.vdouble72[index0], this.bQ);
				this.vdouble74[index0] = Factor.Product(this.vdouble73[index0], this.vdouble73[index0]);
			}
			this.Changed_Nt_Par_QObs_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par and QObs and QObsVar</summary>
		private void Changed_Nt_Par_QObs_QObsVar()
		{
			if (this.Changed_Nt_Par_QObs_QObsVar_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				// Message to 'Q' from GaussianFromMeanAndVariance factor
				this.Q_F[index0] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.vdouble71_F[index0], this.vdouble74[index0]);
			}
			this.Changed_Nt_Par_QObs_QObsVar_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and Par and SObs</summary>
		private void Changed_Nt_Par_SObs()
		{
			if (this.Changed_Nt_Par_SObs_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				if (!this.vbool9[index0]) {
					this.vdouble95[index0] = Factor.Product(this.SStd, this.SStd);
					this.vdouble89[index0] = Factor.Difference(this.vdouble88[index0], this.Delta);
					this.vdouble91[index0] = Factor.Product(6.2831853071795862, this.vdouble89[index0]);
					this.vdouble92[index0] = Math.Sin(this.vdouble91[index0]);
					this.vdouble93[index0] = Factor.Product(this.A, this.vdouble92[index0]);
					// Message to 'vdouble94' from GaussianFromMeanAndVariance factor
					this.vdouble94_B[index0] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.sObs[index0], this.vdouble95[index0]);
					// Message to 'S_index0_1_' from Plus factor
					this.S_index0_1__B[index0] = DoublePlusOp.AAverageConditional(this.vdouble94_B[index0], this.vdouble93[index0]);
					// Message to 'S_uses' from Copy factor
					this.S_uses_B[index0][1] = ArrayHelper.SetTo<Gaussian>(this.S_uses_B[index0][1], this.S_index0_1__B[index0]);
				}
			}
			this.Changed_Nt_Par_SObs_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and PObs1 and PObs2</summary>
		private void Changed_Nt_PObs1_PObs2()
		{
			if (this.Changed_Nt_PObs1_PObs2_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vdouble43[index0] = Factor.Difference(this.pObs1[index0], this.pObs2[index0]);
				this.vdouble44[index0] = Math.Abs(this.vdouble43[index0]);
			}
			this.Changed_Nt_PObs1_PObs2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and QObs and QObsVar</summary>
		private void Changed_Nt_QObs_QObsVar()
		{
			if (this.Changed_Nt_QObs_QObsVar_isDone) {
				return ;
			}
			for(int index0 = 0; index0<this.nt; index0++) {
				// Message to 'vdouble71' from GaussianFromMeanAndVariance factor
				this.vdouble71_F[index0] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.qObs[index0], this.qObsVar[index0]);
			}
			this.Changed_Nt_QObs_QObsVar_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Nt and SObs</summary>
		private void Changed_Nt_SObs()
		{
			if (this.Changed_Nt_SObs_isDone) {
				return ;
			}
			// Create array for replicates of 'vdouble94_B'
			this.vdouble94_B = new Gaussian[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				this.vbool9[index0] = double.IsNaN(this.sObs[index0]);
			}
			// Create array for replicates of 'S_index0_1__B'
			this.S_index0_1__B = new Gaussian[this.nt];
			// Create array for replicates of 'vdouble95'
			this.vdouble95 = new double[this.nt];
			// Create array for replicates of 'vdouble86'
			double[] vdouble86 = new double[this.nt];
			// Create array for replicates of 'vdouble88'
			this.vdouble88 = new double[this.nt];
			// Create array for replicates of 'vdouble92'
			this.vdouble92 = new double[this.nt];
			// Create array for replicates of 'vdouble89'
			this.vdouble89 = new double[this.nt];
			// Create array for replicates of 'vdouble91'
			this.vdouble91 = new double[this.nt];
			// Create array for replicates of 'vdouble93'
			this.vdouble93 = new double[this.nt];
			for(int index0 = 0; index0<this.nt; index0++) {
				if (!this.vbool9[index0]) {
					vdouble86[index0] = Factor.Double(index0);
					this.vdouble88[index0] = Factor.Ratio(vdouble86[index0], 12.0);
				}
				this.S_uses_B[index0][1] = Gaussian.Uniform();
				if (!this.vbool9[index0]) {
					this.vdouble94_B[index0] = Gaussian.Uniform();
					this.S_index0_1__B[index0] = Gaussian.Uniform();
				}
			}
			this.Changed_Nt_SObs_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Par</summary>
		private void Changed_Par()
		{
			if (this.Changed_Par_isDone) {
				return ;
			}
			this.vdouble10 = Factor.GetItem<double>(this.par, 5);
			this.SStd = Math.Exp(this.vdouble10);
			this.vdouble8 = Factor.GetItem<double>(this.par, 4);
			this.Delta = MMath.Logistic(this.vdouble8);
			this.vdouble6 = Factor.GetItem<double>(this.par, 3);
			this.A = Math.Exp(this.vdouble6);
			this.vdouble0 = Factor.GetItem<double>(this.par, 0);
			this.wE = MMath.Logistic(this.vdouble0);
			this.vdouble2 = Factor.GetItem<double>(this.par, 1);
			this.fE = Math.Exp(this.vdouble2);
			this.vdouble4 = Factor.GetItem<double>(this.par, 2);
			this.rE = MMath.Logistic(this.vdouble4);
			this.vdouble16 = Factor.GetItem<double>(this.par, 8);
			this.wP = MMath.Logistic(this.vdouble16);
			this.vdouble18 = Factor.GetItem<double>(this.par, 9);
			this.rP = MMath.Logistic(this.vdouble18);
			this.vdouble12 = Factor.GetItem<double>(this.par, 6);
			this.aQ = Math.Exp(this.vdouble12);
			this.vdouble14 = Factor.GetItem<double>(this.par, 7);
			this.bQ = Math.Exp(this.vdouble14);
			this.wE_marginal_F = Beta.Uniform();
			// Message to 'wE_marginal' from DerivedVariable factor
			this.wE_marginal_F = DerivedVariableOp.MarginalAverageConditional<Beta,double>(this.wE, this.wE_marginal_F);
			this.fE_marginal_F = Gamma.Uniform();
			// Message to 'fE_marginal' from DerivedVariable factor
			this.fE_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gamma,double>(this.fE, this.fE_marginal_F);
			this.rE_marginal_F = Beta.Uniform();
			// Message to 'rE_marginal' from DerivedVariable factor
			this.rE_marginal_F = DerivedVariableOp.MarginalAverageConditional<Beta,double>(this.rE, this.rE_marginal_F);
			this.A_marginal_F = Gamma.Uniform();
			// Message to 'A_marginal' from DerivedVariable factor
			this.A_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gamma,double>(this.A, this.A_marginal_F);
			this.Delta_marginal_F = Beta.Uniform();
			// Message to 'Delta_marginal' from DerivedVariable factor
			this.Delta_marginal_F = DerivedVariableOp.MarginalAverageConditional<Beta,double>(this.Delta, this.Delta_marginal_F);
			this.SStd_marginal_F = Gamma.Uniform();
			// Message to 'SStd_marginal' from DerivedVariable factor
			this.SStd_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gamma,double>(this.SStd, this.SStd_marginal_F);
			this.aQ_marginal_F = Gamma.Uniform();
			// Message to 'aQ_marginal' from DerivedVariable factor
			this.aQ_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gamma,double>(this.aQ, this.aQ_marginal_F);
			this.bQ_marginal_F = Gamma.Uniform();
			// Message to 'bQ_marginal' from DerivedVariable factor
			this.bQ_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gamma,double>(this.bQ, this.bQ_marginal_F);
			this.wP_marginal_F = Beta.Uniform();
			// Message to 'wP_marginal' from DerivedVariable factor
			this.wP_marginal_F = DerivedVariableOp.MarginalAverageConditional<Beta,double>(this.wP, this.wP_marginal_F);
			this.rP_marginal_F = Beta.Uniform();
			// Message to 'rP_marginal' from DerivedVariable factor
			this.rP_marginal_F = DerivedVariableOp.MarginalAverageConditional<Beta,double>(this.rP, this.rP_marginal_F);
			this.Changed_Par_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Delta' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta DeltaMarginal()
		{
			return this.Delta_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'E' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> EMarginal()
		{
			return this.E_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'evidence' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli EvidenceMarginal()
		{
			return this.evidence_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23_isDone = false;
					this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17_isDone = false;
					this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21_isDone = false;
				}
				this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_isDone = false;
			}
			this.Constant();
			this.Changed_Par();
			this.Changed_Nt();
			this.Changed_Nt_Par_QObs();
			this.Changed_Nt_QObs_QObsVar();
			this.Changed_Nt_Par_QObs_QObsVar();
			this.Changed_Nt_PObs1_PObs2();
			this.Changed_Nt_Par_PObs2();
			this.Changed_EObs1_EObs2_Nt();
			this.Changed_EObs2_Nt_Par();
			this.Changed_Nt_Par();
			this.Changed_Nt_Par_PObs1();
			this.Changed_Nt_Par_PObs1_PObs2();
			this.Changed_Nt_Par_PObs1_PObs2_PStd();
			this.Changed_EObs1_Nt_Par();
			this.Changed_EObs1_EObs2_Nt_Par();
			this.Changed_Nt_SObs();
			this.Changed_Nt_Par_SObs();
			this.Changed_Nt_numberOfIterationsDecreased_Init_EObs1_EObs2_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S3(initialise);
			this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_Init_EObs1_EObs2_ParPrior_QObs_QObsVar_S22(initialise);
			this.Changed_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_S0Prior_Init_EObs1_EObs2_ParPrior_QObs_Q23(initialise);
			this.Changed_Nt_numberOfIterationsDecreased_Par_SObs_Init_EObs1_EObs2_ParPrior_PObs1_PObs2_PStd_QObs_QObs17(initialise);
			this.Changed_EObs1_EObs2_Nt_numberOfIterationsDecreased_Par_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs_In21(initialise);
			this.Changed_EObs1_EObs2_Nt_numberOfIterations_Par_ParPrior_PObs1_PObs2_PStd_QObs_QObsVar_S0Prior_SObs(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>
		/// Returns the marginal distribution for 'fE' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma FEMarginal()
		{
			return this.fE_marginal_F;
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="Nt") {
				return this.Nt;
			}
			if (variableName=="ParPrior") {
				return this.ParPrior;
			}
			if (variableName=="Par") {
				return this.Par;
			}
			if (variableName=="PObs1") {
				return this.PObs1;
			}
			if (variableName=="PObs2") {
				return this.PObs2;
			}
			if (variableName=="PStd") {
				return this.PStd;
			}
			if (variableName=="EObs1") {
				return this.EObs1;
			}
			if (variableName=="EObs2") {
				return this.EObs2;
			}
			if (variableName=="QObs") {
				return this.QObs;
			}
			if (variableName=="QObsVar") {
				return this.QObsVar;
			}
			if (variableName=="SObs") {
				return this.SObs;
			}
			if (variableName=="S0Prior") {
				return this.S0Prior;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="wE") {
				return this.WEMarginal();
			}
			if (variableName=="fE") {
				return this.FEMarginal();
			}
			if (variableName=="rE") {
				return this.REMarginal();
			}
			if (variableName=="A") {
				return this.AMarginal();
			}
			if (variableName=="Delta") {
				return this.DeltaMarginal();
			}
			if (variableName=="SStd") {
				return this.SStdMarginal();
			}
			if (variableName=="aQ") {
				return this.AQMarginal();
			}
			if (variableName=="bQ") {
				return this.BQMarginal();
			}
			if (variableName=="wP") {
				return this.WPMarginal();
			}
			if (variableName=="rP") {
				return this.RPMarginal();
			}
			if (variableName=="evidence") {
				return this.EvidenceMarginal();
			}
			if (variableName=="P") {
				return this.PMarginal();
			}
			if (variableName=="E") {
				return this.EMarginal();
			}
			if (variableName=="Q") {
				return this.QMarginal();
			}
			if (variableName=="S") {
				return this.SMarginal();
			}
			if (variableName=="S0") {
				return this.S0Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'P' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> PMarginal()
		{
			return this.P_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Q' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> QMarginal()
		{
			return this.Q_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'rE' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta REMarginal()
		{
			return this.rE_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>
		/// Returns the marginal distribution for 'rP' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta RPMarginal()
		{
			return this.rP_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'S0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian S0Marginal()
		{
			return this.S0_marginal_F;
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="Nt") {
				this.Nt = (int)value;
				return ;
			}
			if (variableName=="ParPrior") {
				this.ParPrior = (VectorGaussian)value;
				return ;
			}
			if (variableName=="Par") {
				this.Par = (Vector)value;
				return ;
			}
			if (variableName=="PObs1") {
				this.PObs1 = (double[])value;
				return ;
			}
			if (variableName=="PObs2") {
				this.PObs2 = (double[])value;
				return ;
			}
			if (variableName=="PStd") {
				this.PStd = (double[])value;
				return ;
			}
			if (variableName=="EObs1") {
				this.EObs1 = (double[])value;
				return ;
			}
			if (variableName=="EObs2") {
				this.EObs2 = (double[])value;
				return ;
			}
			if (variableName=="QObs") {
				this.QObs = (double[])value;
				return ;
			}
			if (variableName=="QObsVar") {
				this.QObsVar = (double[])value;
				return ;
			}
			if (variableName=="SObs") {
				this.SObs = (double[])value;
				return ;
			}
			if (variableName=="S0Prior") {
				this.S0Prior = (Gaussian)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'S' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> SMarginal()
		{
			return this.S_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SStd' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma SStdMarginal()
		{
			return this.SStd_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'wE' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta WEMarginal()
		{
			return this.wE_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'wP' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta WPMarginal()
		{
			return this.wP_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
